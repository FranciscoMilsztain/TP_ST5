//MILSZTAIN_MACIA_SABIN

//API KEY: AIzaSyBSwN-5-gE6q-C40fdfLntIT9lXXuBDC0Q
//DATABASE URL: https://esp32umbral-default-rtdb.firebaseio.com/

//LIBRERIAS
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include <DHT.h>
#include <WiFi.h>
#include <FirebaseClient.h>
#include "time.h"

//ESTADOS
int ESTADO = 1;
#define PANTALLA1 1
#define PANTALLA2 2
#define SOLTAR1 3
#define SOLTAR_SUMAR 4
#define SOLTAR_RESTAR 5
#define SOLTAR2 6

//TIMER
unsigned long timer = 30000;

//BOTONES
#define SW1 34 //switch de aumento de horas
int val1;
#define SW2 35 //switch de aumento de minutos
int val2;

//PANTALLA
#define LONGITUD 128 // longitud
#define ALTURA 64 // altura
Adafruit_SSD1306 display(LONGITUD, ALTURA, &Wire, -1);

//SENSOR DE TEMPERATURA
#define DHTPIN 23
#define DHTTYPE DHT11
DHT dht(DHTPIN, DHTTYPE);
float temp;
float umbral = 24; //limite de temperatura

//TIEMPO
int segs = 0;
int mins = 0;
int horas = 0;

int GMTvariable = -3;
int long gmtOffset_sec = 0; //ESTA VARIABLE VA A DICTAR EL DESFASAJE DE HORAS (comienza en -10800, lo cual es GMT-3, la hora Argentina)
const int daylightOffset_sec = 0;

//WIFI
const char* ssid = "ORT-IoT";
const char* password = "NuevaIOT$25";
const char* ntpServer = "pool.ntp.org";

unsigned long TiempoFirebase = 30000; //30s
unsigned long timestamp;

//FIREBASE
#define Web_API_KEY "AIzaSyBSwN-5-gE6q-C40fdfLntIT9lXXuBDC0Q"
#define DATABASE_URL "https://esp32umbral-default-rtdb.firebaseio.com/"
#define USER_EMAIL "48313738@est.ort.edu.ar"
#define USER_PASS "FranMil1000"

WiFiClientSecure ssl_client;
using AsyncClient = AsyncClientClass;
AsyncClient aClient(ssl_client);
FirebaseApp app;
RealtimeDatabase Database;
UserAuth user_auth(Web_API_KEY, USER_EMAIL, USER_PASS);
object_t jsonData, objUmbral, objTime;
JsonWriter writer;
String uid;
String databasePath;
String parentPath;


void setup() 
{
  Serial.begin(115200);
  Serial.println("Programa iniciado");

  //Botones
  pinMode(SW1, INPUT);
  pinMode(SW2, INPUT);

  //inicializa en sensor de temperatura
  dht.begin(); 

  //Display
  display.begin(SSD1306_SWITCHCAPVCC, 0x3C); //inicializa el display

  //Conexión al wifi
  WiFi.mode(WIFI_STA);
  WiFi.begin(ssid, password);
  client.setCACert(TELEGRAM_CERTIFICATE_ROOT); // Add root certificate for api.telegram.org
  while (WiFi.status() != WL_CONNECTED) 
  {
    delay(500);
    Serial.print("-"); //Se manda indefinidamente si no se logra establecer la conexión al wifi
  }
  Serial.println("WiFi conectado"); //Se manda al verificar que se logró establecer la conexión al wifi

  gmtOffset_sec = GMTvariable * 3600;
  configTime(gmtOffset_sec, daylightOffset_sec, ntpServer); 

  ssl_client.setInsecure();
  initializeApp(aClient, app, getAuth(user_auth), processData, "authTask");
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);
}

void loop() 
{
  //Se actualiza el reloj
  timer = millis();

  //Se llama a la funcion recibirtiempo (Recbie el tiempo de internet)
  recibirtiempo();

  //Se lee la temperatura (en celcious)
  temp = dht.readTemperature();  
  if (temp > umbral)
  {
    Serial.println("La temperatura supero al umbral");
  }

  //Se leen los botones
  val1 = digitalRead(SW1);
  val2 = digitalRead(SW2);

  //Enviar a Firebase cada el intervalo
  if (app.ready() && TiempoFirebase > timer)
  {
    TiempoFirebase = TiempoFirebase + 30000;
    EnviarDatos();
  }

  switch (ESTADO) //INICIO DE MÁQUINA DE ESTADOS
  {
    case PANTALLA1:
    display.clearDisplay(); //Se reinicia el display
    display.setTextSize(2); //Establece el tamaño de texto
    display.setTextColor(WHITE);
    
    display.setCursor(0, 10);
    display.println("TEMP:");
    display.setCursor(60, 10);
    display.println(temp); //display de temperatura

    display.setCursor(0, 50);
    display.println("UMB:");
    display.setCursor(60, 50);
    display.println(umbral); //display de umbral

    display.display(); //Muestra el display

    //CAMBIO DE ESTADO
    if (val1 == 0 && val2 == 0)
    {
      ESTADO = SOLTAR1;
    }
    break;


    case SOLTAR1:
    if (val1 == 1 && val2 == 1)
    {
      ESTADO = PANTALLA2;
    }
    break;

    
    case PANTALLA2:
    display.clearDisplay(); //Se reinicia el display
    display.setTextSize(2); //Establece el tamaño de texto
    display.setTextColor(WHITE);
    
    display.setCursor(0, 10);
    display.println("SETEAR CICLO"); //display de temperatura
    display.setCursor(0, 40);
    display.println(umbral); //display de umbral

    display.display(); //Muestra el display

    //CAMBIO DE ESTADO
    if (val1 == 0) //cambiar a soltar sumar
    {
      ESTADO = SOLTAR_SUMAR;
    }
    if (val2 == 0) //cambiar a soltar restar
    {
      ESTADO = SOLTAR_RESTAR;
    }
    break;


    case SOLTAR_SUMAR:
    if (val1 == 1)
    {
      ESTADO = PANTALLA2;
      //Sumar 30 a firebase
      TiempoFirebase = TiempoFirebase + 30000;
    }

    if (val2 == 0) //Comienzo de vuelta a pantalla1
    {
      ESTADO = SOLTAR2;
    }
    break;


    case SOLTAR_RESTAR:
    if (val2 == 1)
    {
      ESTADO = PANTALLA2;
      //Restar 30 a firebase
      if (TiempoFirebase > 30000)
      {
        TiempoFirebase = TiempoFirebase - 30000;
      }
    }

    if (val1 == 0) //Comienzo de vuelta a pantalla1
    {
      ESTADO = SOLTAR2;
    }
    break;


    case SOLTAR2: //Regresar a pantalla 1 al soltar ambos botones
    if (val1 == 1 && val2 == 1)
    {
      ESTADO = PANTALLA1;
    }
    break;
}

//FUNCIONES

void processData(AsyncResult &aResult)
{
  if (!aResult.isResult()) return;
  if (aResult.isError())
  Firebase.printf("Error task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.error().message().c_str(), aResult.error().code());
}

void recibirtiempo()
{
  struct tm timeinfo; //Se llama a la hora online
  
  if (!getLocalTime(&timeinfo)) { //Se determina si la hora recibida es correcta
    Serial.println("La hora no ha podido ser reconocida");
    return;
  }

  //Este es el dato de tiempo que se enviará por FireBase
  time_t now = mktime(&timeinfo);
  timestamp = now;

  //Los valores recibidos se asignan a sus variables
  segs = timeinfo.tm_sec;
  mins = timeinfo.tm_min;
  horas = timeinfo.tm_hour;

  // Mostrar
  Serial.printf("Hora actual: %02d:%02d:%02d\n", horas, mins, segs);
}

void EnviarDatos() 
{
  uid = app.getUid().c_str();
  databasePath = "/UsersData/" + uid + "/tempData";
  parentPath = databasePath + "/" + String(timestamp);

  writer.create(objTemp, "/temp", temp);
  writer.create(objTime, "/timestamp", timestamp);
  writer.join(jsonData, 2, objUmbral, objTemp);

  Database.set<object_t>(aClient, parentPath, jsonData, processData, "RTDB_Umbral");
}
