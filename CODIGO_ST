//MILSZTAIN_MACIA_SABIN

#define ENABLE_USER_AUTH
#define ENABLE_DATABASE

//Librerias
#include <Wire.h>
#include <Adafruit_GFX.h>
#include <Adafruit_SSD1306.h>
#include "DHT.h"
#include <ESP32Time.h>
#include <WiFi.h>
#include "time.h"
#include <FirebaseClient.h>
#include <WiFiClientSecure.h>

//ESTADOS
#define PANTALLA1 1
#define PANTALLA2 2
#define SOLTAR1 3
#define SOLTAR_SUMAR 4
#define SOLTAR_RESTAR 5
#define SOLTAR2 6

//Ajustes de la pantalla
#define SCREEN_WIDTH 128
#define SCREEN_HEIGHT 64
Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, -1);

//Ajustes del Tiempo
ESP32Time rtc;
int GMT = -3;

//Ajustes del DHT
#define DHTPIN 23
#define DHTTYPE DHT11

DHT dht(DHTPIN, DHTTYPE);
float t;

//Timers
unsigned long TiempoUltimoCambio = 0;
const long Intervalo = 1000;
unsigned long TiempoAhora;

//Ajuestes de WIFI
const char* ssid = "MECA-IoT";
const char* password = "IoT$2025";
int currentGMT = -3;
const char* ntpServer = "pool.ntp.org";

//FireBase User y API
String uid;  // Variable to save USER UID
#define Web_API_KEY "AIzaSyBSwN-5-gE6q-C40fdfLntIT9lXXuBDC0Q"
#define DATABASE_URL "https://esp32umbral-default-rtdb.firebaseio.com/"
#define USER_EMAIL "zapato@gmail.com"
#define USER_PASS "FranMil1000"

void processData(AsyncResult& aResult);
UserAuth user_auth(Web_API_KEY, USER_EMAIL, USER_PASS);  // Verifica el usuario

// Firebase components
FirebaseApp app;
WiFiClientSecure ssl_client;
using AsyncClient = AsyncClientClass; 
AsyncClient aClient(ssl_client);
RealtimeDatabase Database;

//Millis y tiempo
unsigned long lastSendTime = 0;
unsigned long sendInterval = 30000;
int timestamp;
String currentTime;

//Database childnodes
String databasePath;  // Database main path (to be updated in setup with the user UID)
String tempPath = "/temperature";
String timePath = "/timestamp";
String parentPath;  // Parent Node (to be updated in every loop)

// Create JSON objects for storing data
object_t jsonData, obj1, obj2;
JsonWriter writer;

//Definicion de PINES y estado del boton
void MAQUINA_DE_ESTADOS();
#define PULSADO 0
#define NO_PULSADO 1
#define BOTON1 35
#define BOTON2 34
#define LED1 25
#define LED2 26

//Variables generales
int lectura1;
int lectura2;
int estado = 1;
int contador1;
int VALOR_UMBRAL = 26;

unsigned long getTime() 
{
  time_t now;
  struct tm timeinfo;
  if (!getLocalTime(&timeinfo)) 
  {
    //Serial.println("Failed to obtain time");
    return (0);
  }
  return mktime(&timeinfo);
}

void setup() 
{
  Serial.begin(115200);

  //inicio del DHT
  dht.begin();

  //Defunicion de PINES
  pinMode(BOTON1, INPUT);
  pinMode(BOTON2, INPUT);

  //Inicio de la pantalla
  if (!display.begin(SSD1306_SWITCHCAPVCC, 0x3C)) {
    Serial.println(F("SSD1306 allocation failed"));
  }

  //Conectar con el WIFI y sincroniza el tiempo
  connectToWiFi();
  syncTimeWithGMT(currentGMT);
  //configTime(0, 0, ntpServer);

  // Configure SSL client
  ssl_client.setInsecure();
  ssl_client.setConnectionTimeout(1000);
  ssl_client.setHandshakeTimeout(5);

  // Initialize Firebase
  initializeApp(aClient, app, getAuth(user_auth), processData, "authTask");  //Inicia la app
  app.getApp<RealtimeDatabase>(Database);
  Database.url(DATABASE_URL);

  //Ajuestes de la pantalla
  display.clearDisplay();
  display.setTextSize(1);
  display.setTextColor(WHITE);
  display.setCursor(0, 10);
  display.display();
}

void loop() {
  app.loop(); //Para poder usar la app asyncronamente

  if (app.ready()) 
  { //Si esta lista para recibir informacion se inicia el programa
    //Lectura de botones
    lectura1 = digitalRead(BOTON1);
    lectura2 = digitalRead(BOTON2);

    t = dht.readTemperature();    //Lectura temperatura
    TiempoAhora = millis();       //Obtiene el tiempo en millis
    timestamp = getTime();        //Obtiene el tiempod e internet en hexa

  switch (estado) {
    case PANTALLA1:

      if (TiempoAhora - lastSendTime >= sendInterval) {   //Delay sin bloqueo
        // Update the last send time
        lastSendTime = TiempoAhora;

        currenttime = timestamp;

        uid = app.getUid().c_str();

        // Update database path
        databasePath = "/UsersData/" + uid + "/readings";

        //Get current timestamp
        Serial.print("time: ");
        Serial.println(timestamp);

        parentPath = databasePath + "/" + String(timestamp);

        // Create a JSON object with the data
        writer.create(obj1, tempPath, t);     //Guarda la temperatura
        writer.create(obj2, timePath, timestamp);   //Guarda el tiempo en hexa
        writer.join(jsonData, 2, obj1, obj2); //Lo junta en uno

        Database.set<object_t>(aClient, parentPath, jsonData, processData, "RTDB_Send_Data"); //Lo manda y lo procesa en la funcion processData 
      }

      if (TiempoAhora - TiempoUltimoCambio >= 1000)  ///delay sin bloqueo
      {
        TiempoUltimoCambio = TiempoAhora;  /// importante actualizar el tiempo

        display.clearDisplay();
        display.setCursor(0, 7);
        display.print("Pantalla 1");

        display.setCursor(0, 20);
        display.print("Temp: ");
        display.print(t);
        display.print("Â°C ");
        display.setCursor(0, 30);
        display.print("Time: ");
        display.print(currentTime);
        display.setCursor(0, 40);
        display.print("Valor Umbral: ");
        display.print(VALOR_UMBRAL);
        display.display();
      }

      if (t >= VALOR_UMBRAL) {
        digitalWrite(LED1, HIGH);
      } else {
        digitalWrite(LED1, LOW);
      }

      if (lectura1 == PULSADO && lectura2 == PULSADO) {
        estado = SOLTAR1;
      }
      break;

    case SOLTAR1:
      if (lectura1 == NO_PULSADO && lectura2 == NO_PULSADO) {
        estado = PANTALLA2;
      }
      break;

    case PANTALLA2:
      digitalWrite(LED1, LOW);

      if (TiempoAhora - lastSendTime >= sendInterval) {
        // Update the last send time
        lastSendTime = TiempoAhora;

        uid = app.getUid().c_str();

        // Update database path
        databasePath = "/UsersData/" + uid + "/readings";

        //Get current timestamp
        Serial.print("time: ");
        Serial.println(timestamp);

        parentPath = databasePath + "/" + String(currentTime);

        // Get sensor readings


        // Create a JSON object with the data
        writer.create(obj1, tempPath, t);
        writer.create(obj2, timePath, timestamp);
        writer.join(jsonData, 2, obj1, obj2);

        Database.set<object_t>(aClient, parentPath, jsonData, processData, "RTDB_Send_Data");
      }


      if (TiempoAhora - TiempoUltimoCambio >= 1000)  ///delay sin bloqueo
      {
        TiempoUltimoCambio = TiempoAhora;  /// importante actualizar el tiempo

        display.clearDisplay();
        display.setCursor(0, 7);
        display.print("Pantalla 2");
        display.setCursor(0, 20);
        display.print("Temp: ");
        display.print(t);
        display.setCursor(0, 30);
        display.print("Time: ");
        display.print(currentTime);
        display.setCursor(0, 40);
        display.print("Intervalo: ");
        display.print(sendInterval / 1000);
        display.display();
      }

      if (lectura1 == PULSADO) {
        contador1 = 1;
        estado = SOLTAR_SUMAR;
      }
      if (lectura2 == PULSADO) {
        contador1 = 1;
        estado = SOLTAR_RESTAR;
      }
      break;

    case SOLTAR2:
      if (lectura1 == NO_PULSADO && lectura2 == NO_PULSADO) {
        estado = PANTALLA1;
      }
      break;

    case SOLTAR_SUMAR:
      if (lectura2 == PULSADO) {
        estado = SOLTAR2;
      }

      if (lectura1 == NO_PULSADO) {
        digitalWrite(LED1, HIGH);
        if (contador1 == 1) {
          sendInterval = sendInterval + 30000;
          contador1 = 0;
        }
        estado = PANTALLA2;
      }
      break;

    case SOLTAR_RESTAR:
      if (lectura1 == PULSADO) {
        estado = SOLTAR2;
      }

      if (lectura2 == NO_PULSADO) {
        digitalWrite(LED1, HIGH);
        if (contador1 == 1) {
          if (sendInterval > 30000) {
            sendInterval = sendInterval - 30000;
          } else {
            contador1 = 0;
          }
        }
        estado = PANTALLA2;
      }
      break;

    }
  }
}

//Ajuestes del WIFI
void connectToWiFi() {
  Serial.print("Conectando a WiFi...");
  WiFi.begin(ssid, password);
  while (WiFi.status() != WL_CONNECTED) {
    delay(500);
    Serial.print(".");
  }
  Serial.println("\nConectado al WiFi");
}

//Sincronizacion del tiempo con internet
void syncTimeWithGMT(int gmtOffsetHours) {
  long gmtOffset_sec = gmtOffsetHours * 3600;
  configTime(gmtOffset_sec, 0, "pool.ntp.org");

  struct tm timeinfo;
  if (getLocalTime(&timeinfo)) {
    rtc.setTimeStruct(timeinfo);  // Ajusta la hora en el ESP32Time
    Serial.println("Hora sincronizada desde NTP");
  } else {
    Serial.println("Fallo al obtener la hora desde NTP");
  }
}

void processData(AsyncResult& aResult) {
  if (!aResult.isResult())
    return;

  if (aResult.isEvent())
    Firebase.printf("Event task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.eventLog().message().c_str(), aResult.eventLog().code());

  if (aResult.isDebug())
    Firebase.printf("Debug task: %s, msg: %s\n", aResult.uid().c_str(), aResult.debug().c_str());

  if (aResult.isError())
    Firebase.printf("Error task: %s, msg: %s, code: %d\n", aResult.uid().c_str(), aResult.error().message().c_str(), aResult.error().code());

  if (aResult.available())
    Firebase.printf("task: %s, payload: %s\n", aResult.uid().c_str(), aResult.c_str());
}
